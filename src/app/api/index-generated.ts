import * as request from "superagent";
import {
    SuperAgentStatic
} from "superagent";

type CallbackHandler = (err: any, res ? : request.Response) => void;
type todos = {
    'id': number

    'done': boolean

    'task': string

    'due': string

};

type Logger = {
    log: (line: string) => any
};

/**
 * This is a dynamic API generated by PostgREST
 * @class Client
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class Client {

    private domain: string = "http://0.0.0.0:3000";
    private errorHandlers: CallbackHandler[] = [];

    constructor(domain ? : string, private logger ? : Logger) {
        if (domain) {
            this.domain = domain;
        }
    }

    getDomain() {
        return this.domain;
    }

    addErrorHandler(handler: CallbackHandler) {
        this.errorHandlers.push(handler);
    }

    private request(method: string, url: string, body: any, headers: any, queryParameters: any, form: any, reject: CallbackHandler, resolve: CallbackHandler) {
        if (this.logger) {
            this.logger.log(`Call ${method} ${url}`);
        }

        let req = (request as SuperAgentStatic)(method, url).query(queryParameters);

        Object.keys(headers).forEach(key => {
            req.set(key, headers[key]);
        });

        if (body) {
            req.send(body);
        }

        if (typeof(body) === 'object' && !(body.constructor.name === 'Buffer')) {
            req.set('Content-Type', 'application/json');
        }

        if (Object.keys(form).length > 0) {
            req.type('form');
            req.send(form);
        }

        req.end((error, response) => {
            if (error || !response.ok) {
                reject(error);
                this.errorHandlers.forEach(handler => handler(error));
            } else {
                resolve(response);
            }
        });
    }

    getURL(parameters: {
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * OpenAPI description (this document)
     * @method
     * @name Client#get
     */
    get(parameters: {
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/openapi+json, application/json';
            headers['Content-Type'] = 'application/json';

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTodosURL(parameters: {
        'id' ? : string,
        'done' ? : string,
        'task' ? : string,
        'due' ? : string,
        'select' ? : string,
        'order' ? : string,
        'range' ? : string,
        'rangeUnit' ? : string,
        'offset' ? : string,
        'limit' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/todos';
        if (parameters['id'] !== undefined) {
            queryParameters['id'] = parameters['id'];
        }

        if (parameters['done'] !== undefined) {
            queryParameters['done'] = parameters['done'];
        }

        if (parameters['task'] !== undefined) {
            queryParameters['task'] = parameters['task'];
        }

        if (parameters['due'] !== undefined) {
            queryParameters['due'] = parameters['due'];
        }

        if (parameters['select'] !== undefined) {
            queryParameters['select'] = parameters['select'];
        }

        if (parameters['order'] !== undefined) {
            queryParameters['order'] = parameters['order'];
        }

        if (parameters['offset'] !== undefined) {
            queryParameters['offset'] = parameters['offset'];
        }

        if (parameters['limit'] !== undefined) {
            queryParameters['limit'] = parameters['limit'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * 
    * @method
    * @name Client#getTodos
         * @param {string} id - This is a dynamic API generated by PostgREST
         * @param {string} done - This is a dynamic API generated by PostgREST
         * @param {string} task - This is a dynamic API generated by PostgREST
         * @param {string} due - This is a dynamic API generated by PostgREST
         * @param {string} select - Filtering Columns
         * @param {string} order - Ordering
         * @param {string} range - Limiting and Pagination
         * @param {string} rangeUnit - Limiting and Pagination
         * @param {string} offset - Limiting and Pagination
         * @param {string} limit - Limiting and Pagination
        
    */
    getTodos(parameters: {
        'id' ? : string,
        'done' ? : string,
        'task' ? : string,
        'due' ? : string,
        'select' ? : string,
        'order' ? : string,
        'range' ? : string,
        'rangeUnit' ? : string,
        'offset' ? : string,
        'limit' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/todos';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, application/vnd.pgrst.object+json, text/csv';
            headers['Content-Type'] = 'application/json';

            if (parameters['id'] !== undefined) {
                queryParameters['id'] = parameters['id'];
            }

            if (parameters['done'] !== undefined) {
                queryParameters['done'] = parameters['done'];
            }

            if (parameters['task'] !== undefined) {
                queryParameters['task'] = parameters['task'];
            }

            if (parameters['due'] !== undefined) {
                queryParameters['due'] = parameters['due'];
            }

            if (parameters['select'] !== undefined) {
                queryParameters['select'] = parameters['select'];
            }

            if (parameters['order'] !== undefined) {
                queryParameters['order'] = parameters['order'];
            }

            if (parameters['range'] !== undefined) {
                headers['Range'] = parameters['range'];
            }

            if (parameters['rangeUnit'] !== undefined) {
                headers['Range-Unit'] = parameters['rangeUnit'];
            }

            if (parameters['offset'] !== undefined) {
                queryParameters['offset'] = parameters['offset'];
            }

            if (parameters['limit'] !== undefined) {
                queryParameters['limit'] = parameters['limit'];
            }

            headers['Prefer'] = 'count=none';

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTodosURL(parameters: {
        'todos' ? : todos,
        'prefer' ? : "return=representation" | "return=minimal" | "return=none",
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/todos';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * 
     * @method
     * @name Client#postTodos
     * @param {} todos - todos
     * @param {string} prefer - Preference
     */
    postTodos(parameters: {
        'todos' ? : todos,
        'prefer' ? : "return=representation" | "return=minimal" | "return=none",
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/todos';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, application/vnd.pgrst.object+json, text/csv';
            headers['Content-Type'] = 'application/json';

            if (parameters['todos'] !== undefined) {
                body = parameters['todos'];
            }

            if (parameters['prefer'] !== undefined) {
                headers['Prefer'] = parameters['prefer'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTodosURL(parameters: {
        'id' ? : string,
        'done' ? : string,
        'task' ? : string,
        'due' ? : string,
        'prefer' ? : "return=representation" | "return=minimal" | "return=none",
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/todos';
        if (parameters['id'] !== undefined) {
            queryParameters['id'] = parameters['id'];
        }

        if (parameters['done'] !== undefined) {
            queryParameters['done'] = parameters['done'];
        }

        if (parameters['task'] !== undefined) {
            queryParameters['task'] = parameters['task'];
        }

        if (parameters['due'] !== undefined) {
            queryParameters['due'] = parameters['due'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * 
     * @method
     * @name Client#deleteTodos
     * @param {string} id - This is a dynamic API generated by PostgREST
     * @param {string} done - This is a dynamic API generated by PostgREST
     * @param {string} task - This is a dynamic API generated by PostgREST
     * @param {string} due - This is a dynamic API generated by PostgREST
     * @param {string} prefer - Preference
     */
    deleteTodos(parameters: {
        'id' ? : string,
        'done' ? : string,
        'task' ? : string,
        'due' ? : string,
        'prefer' ? : "return=representation" | "return=minimal" | "return=none",
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/todos';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, application/vnd.pgrst.object+json, text/csv';
            headers['Content-Type'] = 'application/json';

            if (parameters['id'] !== undefined) {
                queryParameters['id'] = parameters['id'];
            }

            if (parameters['done'] !== undefined) {
                queryParameters['done'] = parameters['done'];
            }

            if (parameters['task'] !== undefined) {
                queryParameters['task'] = parameters['task'];
            }

            if (parameters['due'] !== undefined) {
                queryParameters['due'] = parameters['due'];
            }

            if (parameters['prefer'] !== undefined) {
                headers['Prefer'] = parameters['prefer'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTodosURL(parameters: {
        'id' ? : string,
        'done' ? : string,
        'task' ? : string,
        'due' ? : string,
        'todos' ? : todos,
        'prefer' ? : "return=representation" | "return=minimal" | "return=none",
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/todos';
        if (parameters['id'] !== undefined) {
            queryParameters['id'] = parameters['id'];
        }

        if (parameters['done'] !== undefined) {
            queryParameters['done'] = parameters['done'];
        }

        if (parameters['task'] !== undefined) {
            queryParameters['task'] = parameters['task'];
        }

        if (parameters['due'] !== undefined) {
            queryParameters['due'] = parameters['due'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * 
     * @method
     * @name Client#patchTodos
     * @param {string} id - This is a dynamic API generated by PostgREST
     * @param {string} done - This is a dynamic API generated by PostgREST
     * @param {string} task - This is a dynamic API generated by PostgREST
     * @param {string} due - This is a dynamic API generated by PostgREST
     * @param {} todos - todos
     * @param {string} prefer - Preference
     */
    patchTodos(parameters: {
        'id' ? : string,
        'done' ? : string,
        'task' ? : string,
        'due' ? : string,
        'todos' ? : todos,
        'prefer' ? : "return=representation" | "return=minimal" | "return=none",
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/todos';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Accept'] = 'application/json, application/vnd.pgrst.object+json, text/csv';
            headers['Content-Type'] = 'application/json';

            if (parameters['id'] !== undefined) {
                queryParameters['id'] = parameters['id'];
            }

            if (parameters['done'] !== undefined) {
                queryParameters['done'] = parameters['done'];
            }

            if (parameters['task'] !== undefined) {
                queryParameters['task'] = parameters['task'];
            }

            if (parameters['due'] !== undefined) {
                queryParameters['due'] = parameters['due'];
            }

            if (parameters['todos'] !== undefined) {
                body = parameters['todos'];
            }

            if (parameters['prefer'] !== undefined) {
                headers['Prefer'] = parameters['prefer'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

}